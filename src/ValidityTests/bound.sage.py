

# This file was *autogenerated* from the file src/ValidityTests/bound.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2)
import sys
from sage.all import *

def Lagrange_bound(poly) :
    sum = _sage_const_0 
    length = poly.degree()
    for i in range(length) :
        sum += abs(poly[i])
    
    potentialBound = ceil(sum/abs(poly[length]))

    return max(_sage_const_1 ,potentialBound)



def Cauchy_bound(poly) :

    coeffList = poly.list()
    max_coeff_abs = max(map(abs, coeffList))

    return _sage_const_1  + max_coeff_abs/abs(poly[poly.degree()])



def local_max_bound_implementation(poly):
    deg = poly.degree()
    if deg < _sage_const_1 :
        return _sage_const_0   
    j = deg
    t = _sage_const_1 

    if poly[deg] < _sage_const_0 :
        poly = -poly  

    tempub = _sage_const_0 
    ub = _sage_const_0 

    for i in range(deg, -_sage_const_1 , -_sage_const_1 ):
        coef_i = poly[i]
        coef_j = poly[j]

        if coef_i < _sage_const_0 :
            tempub = (_sage_const_2 **t * abs(coef_i)) / coef_j
            k = j - i

            tempub = floor(tempub**(_sage_const_1 /k)) + _sage_const_1 
            
            if tempub > ub:
                ub = tempub
                t += _sage_const_1 
        else:
            if coef_i > coef_j:
                j = i
                t = _sage_const_1 
    return ub







# Read polynomial from command line
if len(sys.argv) < _sage_const_2 :
    print("Usage: sage script.sage 'polynomial'")
    sys.exit(_sage_const_1 )

R = PolynomialRing(ZZ, 'x')
x = R.gen()

# Convert input string into polynomial
input_poly_str = sys.argv[_sage_const_1 ]
poly = R(input_poly_str)

print("Input Polynomial:", poly)
print("Lagrange Bound:", Lagrange_bound(poly))
print("Cauchy Bound:", Cauchy_bound(poly))
print("Local Max Bound:", local_max_bound_implementation(poly))

